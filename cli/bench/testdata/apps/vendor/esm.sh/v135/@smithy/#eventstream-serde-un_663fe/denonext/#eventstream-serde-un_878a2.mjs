/* esm.sh - esbuild bundle(@smithy/eventstream-serde-universal@2.1.1) denonext production */
import{EventStreamCodec as p,MessageDecoderStream as v,MessageEncoderStream as S,SmithyMessageDecoderStream as M,SmithyMessageEncoderStream as E}from"/v135/@smithy/eventstream-codec@2.1.1/denonext/eventstream-codec.mjs";function h(s){let t=0,e=0,n=null,r=null,c=o=>{if(typeof o!="number")throw new Error("Attempted to allocate an event message where size was not a number: "+o);t=o,e=4,n=new Uint8Array(o),new DataView(n.buffer).setUint32(0,o,!1)},i=async function*(){let o=s[Symbol.asyncIterator]();for(;;){let{value:l,done:g}=await o.next();if(g){if(t)if(t===e)yield n;else throw new Error("Truncated event message received.");else return;return}let d=l.length,a=0;for(;a<d;){if(!n){let y=d-a;r||(r=new Uint8Array(4));let f=Math.min(4-e,y);if(r.set(l.slice(a,a+f),e),e+=f,a+=f,e<4)break;c(new DataView(r.buffer).getUint32(0,!1)),r=null}let m=Math.min(t-e,d-a);n.set(l.slice(a,a+m),e),e+=m,a+=m,t&&t===e&&(yield n,n=null,t=0,e=0)}}};return{[Symbol.asyncIterator]:i}}function w(s,t){return async function(e){let{value:n}=e.headers[":message-type"];if(n==="error"){let r=new Error(e.headers[":error-message"].value||"UnknownError");throw r.name=e.headers[":error-code"].value,r}else if(n==="exception"){let r=e.headers[":exception-type"].value,c={[r]:e},i=await s(c);if(i.$unknown){let o=new Error(t(e.body));throw o.name=r,o}throw i[r]}else if(n==="event"){let r={[e.headers[":event-type"].value]:e},c=await s(r);return c.$unknown?void 0:c}else throw Error(`Unrecognizable event type: ${e.headers[":event-type"].value}`)}}var u=class{constructor({utf8Encoder:t,utf8Decoder:e}){this.eventStreamCodec=new p(t,e),this.utfEncoder=t}deserialize(t,e){let n=h(t);return new M({messageStream:new v({inputStream:n,decoder:this.eventStreamCodec}),deserializer:w(e,this.utfEncoder)})}serialize(t,e){return new S({messageStream:new E({inputStream:t,serializer:e}),encoder:this.eventStreamCodec,includeEndFrame:!0})}};var I=s=>new u(s);export{u as EventStreamMarshaller,I as eventStreamSerdeProvider};
//# sourceMappingURL=eventstream-serde-universal.mjs.map