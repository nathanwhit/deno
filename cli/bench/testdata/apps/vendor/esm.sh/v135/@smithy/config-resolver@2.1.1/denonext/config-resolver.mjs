/* esm.sh - esbuild bundle(@smithy/config-resolver@2.1.1) denonext production */
import{booleanSelector as d,SelectorType as E}from"/v135/@smithy/util-config-provider@2.2.1/denonext/util-config-provider.mjs";var v="AWS_USE_DUALSTACK_ENDPOINT",D="use_dualstack_endpoint",y=!1,G={environmentVariableSelector:e=>d(e,v,E.ENV),configFileSelector:e=>d(e,D,E.CONFIG),default:!1};import{booleanSelector as _,SelectorType as N}from"/v135/@smithy/util-config-provider@2.2.1/denonext/util-config-provider.mjs";var T="AWS_USE_FIPS_ENDPOINT",A="use_fips_endpoint",h=!1,L={environmentVariableSelector:e=>_(e,T,N.ENV),configFileSelector:e=>_(e,A,N.CONFIG),default:!1};import{normalizeProvider as x}from"/v135/@smithy/util-middleware@2.1.1/denonext/util-middleware.mjs";var $=e=>{let{endpoint:o,urlParser:t}=e;return{...e,tls:e.tls??!0,endpoint:x(typeof o=="string"?t(o):o),isCustomEndpoint:!0,useDualstackEndpoint:x(e.useDualstackEndpoint??!1)}};import{normalizeProvider as u}from"/v135/@smithy/util-middleware@2.1.1/denonext/util-middleware.mjs";var S=async e=>{let{tls:o=!0}=e,t=await e.region();if(!new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/).test(t))throw new Error("Invalid region in client config");let r=await e.useDualstackEndpoint(),s=await e.useFipsEndpoint(),{hostname:i}=await e.regionInfoProvider(t,{useDualstackEndpoint:r,useFipsEndpoint:s})??{};if(!i)throw new Error("Cannot resolve hostname from client config");return e.urlParser(`${o?"https:":"http:"}//${i}`)};var j=e=>{let o=u(e.useDualstackEndpoint??!1),{endpoint:t,useFipsEndpoint:n,urlParser:r}=e;return{...e,tls:e.tls??!0,endpoint:t?u(typeof t=="string"?r(t):t):()=>S({...e,useDualstackEndpoint:o,useFipsEndpoint:n}),isCustomEndpoint:!!t,useDualstackEndpoint:o}};var w="AWS_REGION",C="region",H={environmentVariableSelector:e=>e[w],configFileSelector:e=>e[C],default:()=>{throw new Error("Region is missing")}},ee={preferredFile:"credentials"};var c=e=>typeof e=="string"&&(e.startsWith("fips-")||e.endsWith("-fips"));var l=e=>c(e)?["fips-aws-global","aws-fips"].includes(e)?"us-east-1":e.replace(/fips-(dkr-|prod-)?|-fips/,""):e;var pe=e=>{let{region:o,useFipsEndpoint:t}=e;if(!o)throw new Error("Region is missing");return{...e,region:async()=>{if(typeof o=="string")return l(o);let n=await o();return l(n)},useFipsEndpoint:async()=>{let n=typeof o=="string"?o:await o();return c(n)?!0:typeof t!="function"?Promise.resolve(!!t):t()}}};var f=(e=[],{useFipsEndpoint:o,useDualstackEndpoint:t})=>e.find(({tags:n})=>o===n.includes("fips")&&t===n.includes("dualstack"))?.hostname;var I=(e,{regionHostname:o,partitionHostname:t})=>o||(t?t.replace("{region}",e):void 0);var R=(e,{partitionHash:o})=>Object.keys(o||{}).find(t=>o[t].regions.includes(e))??"aws";var O=(e,{signingRegion:o,regionRegex:t,useFipsEndpoint:n})=>{if(o)return o;if(n){let r=t.replace("\\\\","\\").replace(/^\^/g,"\\.").replace(/\$$/g,"\\."),s=e.match(r);if(s)return s[0].slice(1,-1)}};var ue=(e,{useFipsEndpoint:o=!1,useDualstackEndpoint:t=!1,signingService:n,regionHash:r,partitionHash:s})=>{let i=R(e,{partitionHash:s}),p=e in r?e:s[i]?.endpoint??e,g={useFipsEndpoint:o,useDualstackEndpoint:t},F=f(r[p]?.variants,g),P=f(s[i]?.variants,g),a=I(p,{regionHostname:F,partitionHostname:P});if(a===void 0)throw new Error(`Endpoint resolution failed for: ${{resolvedRegion:p,useFipsEndpoint:o,useDualstackEndpoint:t}}`);let m=O(a,{signingRegion:r[p]?.signingRegion,regionRegex:s[i].regionRegex,useFipsEndpoint:o});return{partition:i,signingService:n,hostname:a,...m&&{signingRegion:m},...r[p]?.signingService&&{signingService:r[p].signingService}}};export{D as CONFIG_USE_DUALSTACK_ENDPOINT,A as CONFIG_USE_FIPS_ENDPOINT,y as DEFAULT_USE_DUALSTACK_ENDPOINT,h as DEFAULT_USE_FIPS_ENDPOINT,v as ENV_USE_DUALSTACK_ENDPOINT,T as ENV_USE_FIPS_ENDPOINT,ee as NODE_REGION_CONFIG_FILE_OPTIONS,H as NODE_REGION_CONFIG_OPTIONS,G as NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS,L as NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS,w as REGION_ENV_NAME,C as REGION_INI_NAME,ue as getRegionInfo,$ as resolveCustomEndpointsConfig,j as resolveEndpointsConfig,pe as resolveRegionConfig};
//# sourceMappingURL=config-resolver.mjs.map