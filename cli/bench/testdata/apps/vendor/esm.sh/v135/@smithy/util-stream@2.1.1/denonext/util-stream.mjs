/* esm.sh - esbuild bundle(@smithy/util-stream@2.1.1) denonext production */
import{fromBase64 as x,toBase64 as g}from"/v135/@smithy/util-base64@2.1.1/denonext/util-base64.mjs";import{fromUtf8 as E,toUtf8 as T}from"/v135/@smithy/util-utf8@2.1.1/denonext/util-utf8.mjs";function c(e,t="utf-8"){return t==="base64"?g(e):T(e)}function d(e,t){return t==="base64"?s.mutate(x(e)):s.mutate(E(e))}var s=class e extends Uint8Array{static fromString(t,o="utf-8"){switch(typeof t){case"string":return d(t,o);default:throw new Error(`Unsupported conversion from ${typeof t} to Uint8ArrayBlobAdapter.`)}}static mutate(t){return Object.setPrototypeOf(t,e.prototype),t}transformToString(t="utf-8"){return c(this,t)}};var D=(e,t)=>{let{base64Encoder:o,bodyLengthChecker:f,checksumAlgorithmFn:r,checksumLocationName:n,streamHasher:i}=t,u=o!==void 0&&f!==void 0&&r!==void 0&&n!==void 0&&i!==void 0,y=u?i(r,e):void 0,h=e.getReader();return new ReadableStream({async pull(a){let{value:m,done:w}=await h.read();if(w){if(a.enqueue(`0\r
`),u){let S=o(await y);a.enqueue(`${n}:${S}\r
`),a.enqueue(`\r
`)}a.close()}else a.enqueue(`${(f(m)||0).toString(16)}\r
${m}\r
`)}})};import{streamCollector as B}from"/v135/@smithy/fetch-http-handler@2.4.1/denonext/fetch-http-handler.mjs";import{toBase64 as R}from"/v135/@smithy/util-base64@2.1.1/denonext/util-base64.mjs";import{toHex as A}from"/v135/@smithy/util-hex-encoding@2.1.1/denonext/util-hex-encoding.mjs";import{toUtf8 as k}from"/v135/@smithy/util-utf8@2.1.1/denonext/util-utf8.mjs";var p="The stream has already been transformed.",H=e=>{if(!l(e)&&!b(e)){let r=e?.__proto__?.constructor?.name||e;throw new Error(`Unexpected stream implementation, expect Blob or ReadableStream, got ${r}`)}let t=!1,o=async()=>{if(t)throw new Error(p);return t=!0,await B(e)},f=r=>{if(typeof r.stream!="function")throw new Error(`Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.
If you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body`);return r.stream()};return Object.assign(e,{transformToByteArray:o,transformToString:async r=>{let n=await o();if(r==="base64")return R(n);if(r==="hex")return A(n);if(r===void 0||r==="utf8"||r==="utf-8")return k(n);if(typeof TextDecoder=="function")return new TextDecoder(r).decode(n);throw new Error("TextDecoder is not available, please make sure polyfill is provided.")},transformToWebStream:()=>{if(t)throw new Error(p);if(t=!0,l(e))return f(e);if(b(e))return e;throw new Error(`Cannot transform payload to web stream, got ${e}`)}})},l=e=>typeof Blob=="function"&&e instanceof Blob,b=e=>typeof ReadableStream=="function"&&e instanceof ReadableStream;export{s as Uint8ArrayBlobAdapter,D as getAwsChunkedEncodingStream,H as sdkStreamMixin};
//# sourceMappingURL=util-stream.mjs.map