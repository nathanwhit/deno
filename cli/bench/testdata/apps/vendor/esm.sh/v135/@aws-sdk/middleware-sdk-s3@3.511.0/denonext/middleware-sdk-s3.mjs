/* esm.sh - esbuild bundle(@aws-sdk/middleware-sdk-s3@3.511.0) denonext production */
import{HttpRequest as P}from"/v135/@smithy/protocol-http@3.1.1/denonext/protocol-http.mjs";import{NoOpLogger as C}from"/v135/@smithy/smithy-client@2.3.1/denonext/smithy-client.mjs";var O="content-length";function M(){return(t,e)=>async r=>{let{request:s}=r;if(P.isInstance(s)&&!(O in s.headers)){let i="Are you using a Stream of unknown length as the Body of a PutObject request? Consider using Upload instead from @aws-sdk/lib-storage.";typeof e?.logger?.warn=="function"&&!(e.logger instanceof C)?e.logger.warn(i):console.warn(i)}return t({...r})}}var k={step:"finalizeRequest",tags:["CHECK_CONTENT_LENGTH_HEADER"],name:"getCheckContentLengthHeaderPlugin",override:!0},ee=t=>({applyToStack:e=>{e.add(M(),k)}});var f=t=>(e,r)=>async s=>{let i=await t.region(),n=t.region;r.__s3RegionRedirect&&(t.region=async()=>(t.region=n,r.__s3RegionRedirect));let o=await e(s);if(r.__s3RegionRedirect){let a=await t.region();if(i!==a)throw new Error("Region was not restored following S3 region redirect.")}return o},_={tags:["REGION_REDIRECT","S3"],name:"regionRedirectEndpointMiddleware",override:!0,relation:"before",toMiddleware:"endpointV2Middleware"};function v(t){return(e,r)=>async s=>{try{return await e(s)}catch(i){if(t.followRegionRedirects&&i?.$metadata?.httpStatusCode===301){try{let n=i.$response.headers["x-amz-bucket-region"];r.logger?.debug(`Redirecting from ${await t.region()} to ${n}`),r.__s3RegionRedirect=n}catch(n){throw new Error("Region redirect failed: "+n)}return e(s)}else throw i}}}var D={step:"initialize",tags:["REGION_REDIRECT","S3"],name:"regionRedirectMiddleware",override:!0},ie=t=>({applyToStack:e=>{e.add(v(t),D),e.addRelativeTo(f(t),_)}});import{HttpResponse as H}from"/v135/@smithy/protocol-http@3.1.1/denonext/protocol-http.mjs";import{parseRfc7231DateTime as B}from"/v135/@smithy/smithy-client@2.3.1/denonext/smithy-client.mjs";var K=t=>(e,r)=>async s=>{let i=await e(s),{response:n}=i;if(H.isInstance(n)&&n.headers.expires){n.headers.expiresstring=n.headers.expires;try{B(n.headers.expires)}catch(o){r.logger?.warn(`AWS SDK Warning for ${r.clientName}::${r.commandName} response parsing (${n.headers.expires}): ${o}`),delete n.headers.expires}}return i},b={tags:["S3"],name:"s3ExpiresMiddleware",override:!0,relation:"after",toMiddleware:"deserializerMiddleware"},de=t=>({applyToStack:e=>{e.addRelativeTo(K(t),b)}});var p=class t{constructor(e={}){this.data=e,this.lastPurgeTime=Date.now()}get(e){let r=this.data[e];if(r)return r}set(e,r){return this.data[e]=r,r}delete(e){delete this.data[e]}async purgeExpired(){let e=Date.now();if(!(this.lastPurgeTime+t.EXPIRED_CREDENTIAL_PURGE_INTERVAL_MS>e))for(let r in this.data){let s=this.data[r];if(!s.isRefreshing){let i=await s.identity;i.expiration&&i.expiration.getTime()<e&&delete this.data[r]}}}};p.EXPIRED_CREDENTIAL_PURGE_INTERVAL_MS=3e4;var c=class{constructor(e,r=!1,s=Date.now()){this._identity=e,this.isRefreshing=r,this.accessed=s}get identity(){return this.accessed=Date.now(),this._identity}};var E=class t{constructor(e,r=new p){this.createSessionFn=e,this.cache=r}async getS3ExpressIdentity(e,r){let s=r.Bucket,{cache:i}=this,n=i.get(s);return n?n.identity.then(o=>(o.expiration?.getTime()??0)<Date.now()?i.set(s,new c(this.getIdentity(s))).identity:((o.expiration?.getTime()??0)<Date.now()+t.REFRESH_WINDOW_MS&&!n.isRefreshing&&(n.isRefreshing=!0,this.getIdentity(s).then(S=>{i.set(s,new c(Promise.resolve(S)))})),o)):i.set(s,new c(this.getIdentity(s))).identity}async getIdentity(e){await this.cache.purgeExpired().catch(i=>{console.warn(`Error while clearing expired entries in S3ExpressIdentityCache: 
`+i)});let r=await this.createSessionFn(e);if(!r.Credentials?.AccessKeyId||!r.Credentials?.SecretAccessKey)throw new Error("s3#createSession response credential missing AccessKeyId or SecretAccessKey.");return{accessKeyId:r.Credentials.AccessKeyId,secretAccessKey:r.Credentials.SecretAccessKey,sessionToken:r.Credentials.SessionToken,expiration:r.Credentials.Expiration?new Date(r.Credentials.Expiration):void 0}}};E.REFRESH_WINDOW_MS=6e4;import{SignatureV4 as X}from"/v135/@smithy/signature-v4@2.1.1/denonext/signature-v4.mjs";import{booleanSelector as h,SelectorType as w}from"/v135/@smithy/util-config-provider@2.2.1/denonext/util-config-provider.mjs";var x="Directory",m="S3Express",R="sigv4-s3express",u="X-Amz-S3session-Token",l=u.toLowerCase(),L="AWS_S3_DISABLE_EXPRESS_SESSION_AUTH",U="s3_disable_express_session_auth",W={environmentVariableSelector:t=>h(t,L,w.ENV),configFileSelector:t=>h(t,U,w.CONFIG),default:!1};var g=class extends X{async signWithCredentials(e,r,s){let i=y(r);e.headers[l]=r.sessionToken;let n=this;return I(n,i),n.signRequest(e,s??{})}async presignWithCredentials(e,r,s){let i=y(r);return delete e.headers[l],e.headers[u]=r.sessionToken,e.query=e.query??{},e.query[u]=r.sessionToken,I(this,i),this.presign(e,s)}};function y(t){return{accessKeyId:t.accessKeyId,secretAccessKey:t.secretAccessKey,expiration:t.expiration}}function I(t,e){let r=setTimeout(()=>{throw new Error("SignatureV4S3Express credential override was created but not called.")},10),s=t.credentialProvider,i=()=>(clearTimeout(r),t.credentialProvider=s,Promise.resolve(e));t.credentialProvider=i}import{HttpRequest as V}from"/v135/@smithy/protocol-http@3.1.1/denonext/protocol-http.mjs";var T=t=>(e,r)=>async s=>{if(r.endpointV2){let i=r.endpointV2,n=i.properties?.authSchemes?.[0]?.name===R;if((i.properties?.backend===m||i.properties?.bucketType===x)&&(r.isS3ExpressBucket=!0),n){let a=s.input.Bucket;if(a){let d=await t.s3ExpressIdentityProvider.getS3ExpressIdentity(await t.credentials(),{Bucket:a});r.s3ExpressIdentity=d,V.isInstance(s.request)&&d.sessionToken&&(s.request.headers[l]=d.sessionToken)}}}return e(s)},A={name:"s3ExpressMiddleware",step:"build",tags:["S3","S3_EXPRESS"],override:!0},$=t=>({applyToStack:e=>{e.add(T(t),A)}});var Me=(t,{session:e})=>{let[r,s]=e;return{...t,forcePathStyle:t.forcePathStyle??!1,useAccelerateEndpoint:t.useAccelerateEndpoint??!1,disableMultiregionAccessPoints:t.disableMultiregionAccessPoints??!1,followRegionRedirects:t.followRegionRedirects??!1,s3ExpressIdentityProvider:t.s3ExpressIdentityProvider??new E(async i=>r().send(new s({Bucket:i,SessionMode:"ReadWrite"})))}};import{HttpResponse as q}from"/v135/@smithy/protocol-http@3.1.1/denonext/protocol-http.mjs";var z=t=>e=>async r=>{let s=await e(r),{response:i}=s;if(!q.isInstance(i))return s;let{statusCode:n,body:o}=i;if(n<200||n>=300)return s;let a=await N(o,t),d=await G(a,t);if(a.length===0){let S=new Error("S3 aborted request");throw S.name="InternalError",S}return d&&d.match("<Error>")&&(i.statusCode=400),i.body=a,s},N=(t=new Uint8Array,e)=>t instanceof Uint8Array?Promise.resolve(t):e.streamCollector(t)||Promise.resolve(new Uint8Array),G=(t,e)=>N(t,e).then(r=>e.utf8Encoder(r)),F={relation:"after",toMiddleware:"deserializerMiddleware",tags:["THROW_200_EXCEPTIONS","S3"],name:"throw200ExceptionsMiddleware",override:!0},De=t=>({applyToStack:e=>{e.addRelativeTo(z(t),F)}});import{validate as Y}from"/v135/@aws-sdk/util-arn-parser@3.495.0/denonext/util-arn-parser.mjs";function Q(){return t=>async e=>{let{input:{Bucket:r}}=e;if(typeof r=="string"&&!Y(r)&&r.indexOf("/")>=0){let s=new Error(`Bucket name shouldn't contain '/', received '${r}'`);throw s.name="InvalidBucketName",s}return t({...e})}}var j={step:"initialize",tags:["VALIDATE_BUCKET_NAME"],name:"validateBucketNameMiddleware",override:!0},Ke=t=>({applyToStack:e=>{e.add(Q(),j)}});export{W as NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_OPTIONS,p as S3ExpressIdentityCache,c as S3ExpressIdentityCacheEntry,E as S3ExpressIdentityProviderImpl,g as SignatureV4S3Express,M as checkContentLengthHeader,k as checkContentLengthHeaderMiddlewareOptions,ee as getCheckContentLengthHeaderPlugin,ie as getRegionRedirectMiddlewarePlugin,de as getS3ExpiresMiddlewarePlugin,$ as getS3ExpressPlugin,De as getThrow200ExceptionsPlugin,Ke as getValidateBucketNamePlugin,f as regionRedirectEndpointMiddleware,_ as regionRedirectEndpointMiddlewareOptions,v as regionRedirectMiddleware,D as regionRedirectMiddlewareOptions,Me as resolveS3Config,K as s3ExpiresMiddleware,b as s3ExpiresMiddlewareOptions,T as s3ExpressMiddleware,A as s3ExpressMiddlewareOptions,z as throw200ExceptionsMiddleware,F as throw200ExceptionsMiddlewareOptions,Q as validateBucketNameMiddleware,j as validateBucketNameMiddlewareOptions};
//# sourceMappingURL=middleware-sdk-s3.mjs.map