/* esm.sh - esbuild bundle(@aws-sdk/region-config-resolver@3.511.0) denonext production */
var g=e=>{let o=async()=>{if(e.region===void 0)throw new Error("Region is missing from runtimeConfig");let r=e.region;return typeof r=="string"?r:r()};return{setRegion(r){o=r},region(){return o}}},f=e=>({region:e.region()});var s="AWS_REGION",p="region",R={environmentVariableSelector:e=>e[s],configFileSelector:e=>e[p],default:()=>{throw new Error("Region is missing")}},a={preferredFile:"credentials"};var i=e=>typeof e=="string"&&(e.startsWith("fips-")||e.endsWith("-fips"));var t=e=>i(e)?["fips-aws-global","aws-fips"].includes(e)?"us-east-1":e.replace(/fips-(dkr-|prod-)?|-fips/,""):e;var N=e=>{let{region:o,useFipsEndpoint:r}=e;if(!o)throw new Error("Region is missing");return{...e,region:async()=>{if(typeof o=="string")return t(o);let n=await o();return t(n)},useFipsEndpoint:async()=>{let n=typeof o=="string"?o:await o();return i(n)?!0:typeof r!="function"?Promise.resolve(!!r):r()}}};export{a as NODE_REGION_CONFIG_FILE_OPTIONS,R as NODE_REGION_CONFIG_OPTIONS,s as REGION_ENV_NAME,p as REGION_INI_NAME,g as getAwsRegionExtensionConfiguration,f as resolveAwsRegionExtensionConfiguration,N as resolveRegionConfig};
//# sourceMappingURL=region-config-resolver.mjs.map