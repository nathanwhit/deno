/* esm.sh - esbuild bundle(@aws-sdk/middleware-flexible-checksums@3.511.0) denonext production */
var o;(function(e){e.MD5="MD5",e.CRC32="CRC32",e.CRC32C="CRC32C",e.SHA1="SHA1",e.SHA256="SHA256"})(o||(o={}));var O;(function(e){e.HEADER="header",e.TRAILER="trailer"})(O||(O={}));var b=o.MD5,T=o.CRC32;import{HttpRequest as W}from"/v135/@smithy/protocol-http@3.1.1/denonext/protocol-http.mjs";var A=[o.CRC32,o.CRC32C,o.SHA1,o.SHA256],I=[o.CRC32,o.CRC32C,o.SHA1,o.SHA256];var _=(e,{requestChecksumRequired:r,requestAlgorithmMember:t},n)=>{let i=n?T:b;if(!t||!e[t])return r?i:void 0;let a=e[t];if(!A.includes(a))throw new Error(`The checksum algorithm "${a}" is not supported by the client. Select one of ${A}.`);return a};var C=e=>e===o.MD5?"content-md5":`x-amz-checksum-${e.toLowerCase()}`;var y=(e,r)=>{let t=e.toLowerCase();for(let n of Object.keys(r))if(t===n.toLowerCase())return!0;return!1};import{isArrayBuffer as v}from"/v135/@smithy/is-array-buffer@2.1.1/denonext/is-array-buffer.mjs";var f=e=>e!==void 0&&typeof e!="string"&&!ArrayBuffer.isView(e)&&!v(e);import{AwsCrc32 as $}from"/v135/@aws-crypto/crc32@3.0.0/denonext/crc32.mjs";import{AwsCrc32c as K}from"/v135/@aws-crypto/crc32c@3.0.0/denonext/crc32c.mjs";var x=(e,r)=>({[o.MD5]:r.md5,[o.CRC32]:$,[o.CRC32C]:K,[o.SHA1]:r.sha1,[o.SHA256]:r.sha256})[e];import{toUint8Array as z}from"/v135/@smithy/util-utf8@2.1.1/denonext/util-utf8.mjs";var H=(e,r)=>{let t=new e;return t.update(z(r||"")),t.digest()};var D={name:"flexibleChecksumsMiddleware",step:"build",tags:["BODY_CHECKSUM"],override:!0},N=(e,r)=>(t,n)=>async i=>{if(!W.isInstance(i.request))return t(i);let{request:a}=i,{body:m,headers:s}=a,{base64Encoder:c,streamHasher:p}=e,{input:d,requestChecksumRequired:R,requestAlgorithmMember:h}=r,S=_(d,{requestChecksumRequired:R,requestAlgorithmMember:h},!!n.isS3ExpressBucket),k=m,l=s;if(S){let u=C(S),L=x(S,e);if(f(m)){let{getAwsChunkedEncodingStream:E,bodyLengthChecker:q}=e;k=E(m,{base64Encoder:c,bodyLengthChecker:q,checksumLocationName:u,checksumAlgorithmFn:L,streamHasher:p}),l={...s,"content-encoding":s["content-encoding"]?`${s["content-encoding"]},aws-chunked`:"aws-chunked","transfer-encoding":"chunked","x-amz-decoded-content-length":s["content-length"],"x-amz-content-sha256":"STREAMING-UNSIGNED-PAYLOAD-TRAILER","x-amz-trailer":u},delete l["content-length"]}else if(!y(u,s)){let E=await H(L,m);l={...s,[u]:c(E)}}}return await t({...i,request:{...a,headers:l,body:k}})};import{HttpRequest as Y}from"/v135/@smithy/protocol-http@3.1.1/denonext/protocol-http.mjs";var g=(e=[])=>{let r=[];for(let t of I)!e.includes(t)||!A.includes(t)||r.push(t);return r};var F=e=>{let r=e.lastIndexOf("-");if(r!==-1){let t=e.slice(r+1);if(!t.startsWith("0")){let n=parseInt(t,10);if(!isNaN(n)&&n>=1&&n<=1e4)return!0}}return!1};function M(e){return new Blob([e]).stream()}var P=async(e,{streamHasher:r,checksumAlgorithmFn:t,base64Encoder:n})=>{let i=f(e)?r(t,e):H(t,e);return n(await i)};var U=async(e,{config:r,responseAlgorithms:t})=>{let n=g(t),{body:i,headers:a}=e;for(let m of n){let s=C(m),c=a[s];if(c){let p=x(m,r),{streamHasher:d,base64Encoder:R}=r,h=await P(i,{streamHasher:d,checksumAlgorithmFn:p,base64Encoder:R});if(h===c)break;throw new Error(`Checksum mismatch: expected "${h}" but received "${c}" in response header "${s}".`)}}};var G={name:"flexibleChecksumsResponseMiddleware",toMiddleware:"deserializerMiddleware",relation:"after",tags:["BODY_CHECKSUM"],override:!0},B=(e,r)=>(t,n)=>async i=>{if(!Y.isInstance(i.request))return t(i);let a=i.input,m=await t(i),s=m.response,c,{requestValidationModeMember:p,responseAlgorithms:d}=r;if(p&&a[p]==="ENABLED"){let{clientName:R,commandName:h}=n;if(R==="S3Client"&&h==="GetObjectCommand"&&g(d).every(l=>{let w=C(l),u=s.headers[w];return!u||F(u)}))return m;let k=f(s.body);k&&(c=await e.streamCollector(s.body),s.body=M(c)),await U(m.response,{config:e,responseAlgorithms:d}),k&&c&&(s.body=M(c))}return m};var qe=(e,r)=>({applyToStack:t=>{t.add(N(e,r),D),t.addRelativeTo(B(e,r),G)}});export{o as ChecksumAlgorithm,O as ChecksumLocation,b as DEFAULT_CHECKSUM_ALGORITHM,T as S3_EXPRESS_DEFAULT_CHECKSUM_ALGORITHM,N as flexibleChecksumsMiddleware,D as flexibleChecksumsMiddlewareOptions,qe as getFlexibleChecksumsPlugin};
//# sourceMappingURL=middleware-flexible-checksums.mjs.map